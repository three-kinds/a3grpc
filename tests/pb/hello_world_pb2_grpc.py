# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import warnings

import tests.pb.hello_world_pb2 as hello__world__pb2

GRPC_GENERATED_VERSION = "1.70.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in hello_world_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class GreeterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.say_hello = channel.unary_unary(
            "/Greeter/say_hello",
            request_serializer=hello__world__pb2.HelloRequest.SerializeToString,
            response_deserializer=hello__world__pb2.HelloReply.FromString,
            _registered_method=True,
        )
        self.say_stream_hello_reply = channel.stream_unary(
            "/Greeter/say_stream_hello_reply",
            request_serializer=hello__world__pb2.HelloRequest.SerializeToString,
            response_deserializer=hello__world__pb2.HelloReply.FromString,
            _registered_method=True,
        )
        self.say_hello_stream_reply = channel.unary_stream(
            "/Greeter/say_hello_stream_reply",
            request_serializer=hello__world__pb2.HelloRequest.SerializeToString,
            response_deserializer=hello__world__pb2.HelloReply.FromString,
            _registered_method=True,
        )
        self.say_hello_bidi_stream = channel.stream_stream(
            "/Greeter/say_hello_bidi_stream",
            request_serializer=hello__world__pb2.HelloRequest.SerializeToString,
            response_deserializer=hello__world__pb2.HelloReply.FromString,
            _registered_method=True,
        )


class GreeterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def say_hello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def say_stream_hello_reply(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def say_hello_stream_reply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def say_hello_bidi_stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "say_hello": grpc.unary_unary_rpc_method_handler(
            servicer.say_hello,
            request_deserializer=hello__world__pb2.HelloRequest.FromString,
            response_serializer=hello__world__pb2.HelloReply.SerializeToString,
        ),
        "say_stream_hello_reply": grpc.stream_unary_rpc_method_handler(
            servicer.say_stream_hello_reply,
            request_deserializer=hello__world__pb2.HelloRequest.FromString,
            response_serializer=hello__world__pb2.HelloReply.SerializeToString,
        ),
        "say_hello_stream_reply": grpc.unary_stream_rpc_method_handler(
            servicer.say_hello_stream_reply,
            request_deserializer=hello__world__pb2.HelloRequest.FromString,
            response_serializer=hello__world__pb2.HelloReply.SerializeToString,
        ),
        "say_hello_bidi_stream": grpc.stream_stream_rpc_method_handler(
            servicer.say_hello_bidi_stream,
            request_deserializer=hello__world__pb2.HelloRequest.FromString,
            response_serializer=hello__world__pb2.HelloReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("Greeter", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("Greeter", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def say_hello(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Greeter/say_hello",
            hello__world__pb2.HelloRequest.SerializeToString,
            hello__world__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def say_stream_hello_reply(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            "/Greeter/say_stream_hello_reply",
            hello__world__pb2.HelloRequest.SerializeToString,
            hello__world__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def say_hello_stream_reply(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/Greeter/say_hello_stream_reply",
            hello__world__pb2.HelloRequest.SerializeToString,
            hello__world__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def say_hello_bidi_stream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/Greeter/say_hello_bidi_stream",
            hello__world__pb2.HelloRequest.SerializeToString,
            hello__world__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
